{"version":3,"sources":["api.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["api","grid","Array","i","length","j","Math","random","row","aliveNeighboursTotal","undefined","_this","this","updatedGrid","map","cell","aliveNeighboursCount","findAliveNeighbours","Grid","_ref","react_default","a","createElement","className","key","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleUpdateGrid","bind","assertThisInitialized","handleRefresh","setState","createSeedGrid","gridUpdate","createNextGrid","src_Grid","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b00e16e.chunk.js","sourcesContent":["class Api {\n  createSeedGrid() {\n    let grid = new Array(50);\n\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(50);\n      for (let j = 0; j < grid.length; j++) {\n        grid[i][j] = Math.random() >= 0.75;\n      }\n    }\n    return grid;\n  }\n\n  findAliveNeighbours(i, j, grid, row) {\n    let aliveNeighboursTotal = 0;\n    // current row\n    if (row[j - 1]) {\n      aliveNeighboursTotal++;\n    }\n    if (row[j + 1]) {\n      aliveNeighboursTotal++;\n    }\n    // row above\n    if (grid[i - 1] !== undefined) {\n      if (grid[i - 1][j - 1]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i - 1][j]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i - 1][j + 1]) {\n        aliveNeighboursTotal++;\n      }\n    }\n    // row below\n    if (grid[i + 1] !== undefined) {\n      if (grid[i + 1][j - 1]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i + 1][j]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i + 1][j + 1]) {\n        aliveNeighboursTotal++;\n      }\n    }\n    return aliveNeighboursTotal;\n  }\n\n  createNextGrid(grid) {\n    let updatedGrid = [];\n    grid.map((row, i) => {\n      updatedGrid[i] = [];\n\n      return row.map((cell, j) => {\n        let aliveNeighboursCount = this.findAliveNeighbours(i, j, grid, row);\n\n        if (grid[i][j] === true) {\n          if (aliveNeighboursCount >= 2 && aliveNeighboursCount <= 3) {\n            updatedGrid[i][j] = true;\n          } else {\n            updatedGrid[i][j] = false;\n          }\n        } else {\n          updatedGrid[i][j] = aliveNeighboursCount === 3 ? true : false;\n        }\n      });\n    });\n    return updatedGrid;\n  }\n}\n\nlet api = new Api();\n\nexport default api;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Grid = ({ grid }) => {\n  return grid.map((row, i) => {\n    return (\n      <div className=\"flex-container\" key={i}>\n        {row.map((cell, j) =>\n          cell ? (\n            <div className=\"grid-cell_alive\" key={j}>\n              {cell}\n            </div>\n          ) : (\n            <div className=\"grid-cell\" key={j}>\n              {cell}\n            </div>\n          )\n        )}\n      </div>\n    );\n  });\n};\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport api from \"./api.js\";\nimport Grid from \"./Grid.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [[]]\n    };\n    this.handleUpdateGrid = this.handleUpdateGrid.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ grid: api.createSeedGrid() });\n  }\n\n  handleRefresh() {\n    this.setState({ grid: api.createSeedGrid() });\n  }\n\n  handleUpdateGrid() {\n    let gridUpdate = api.createNextGrid(this.state.grid);\n    this.setState({ grid: gridUpdate });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section>\n          <Grid grid={this.state.grid} />\n          <button onClick={this.handleUpdateGrid}>update grid</button>\n          <button onClick={this.handleRefresh}>refresh grid</button>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}