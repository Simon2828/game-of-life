{"version":3,"sources":["api.js","Grid.js","SizeOfGrid.js","App.js","serviceWorker.js","index.js"],"names":["api","sizeOfGrid","grid","Array","console","log","i","length","j","Math","random","row","aliveNeighboursTotal","undefined","aliveNeighboursCount","_this","this","updatedGrid","map","cell","findAliveNeighbours","totalAlive","getTotalAlive","filter","flat","Grid","_ref","onClick","react_default","a","createElement","className","key","SizeOfGrid","handleSubmit","handleChange","size","onSubmit","type","value","onChange","App","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","running","numberAlive","handleUpdateGrid","bind","assertThisInitialized","handleRefresh","toggleCell","setState","createSeedGrid","runIteration","_this2","window","setInterval","createNextGrid","gridCopy","toConsumableArray","event","parseInt","target","e","preventDefault","src_SizeOfGrid","src_Grid","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2477bd23.chunk.js","sourcesContent":["\n\nclass Api {\n  createSeedGrid(sizeOfGrid) {\n    let grid = new Array(sizeOfGrid);\n    console.log(\"grid\", grid);\n\n    for (let i = 0; i < grid.length; i++) {\n      grid[i] = new Array(sizeOfGrid);\n      for (let j = 0; j < grid.length; j++) {\n        grid[i][j] = Math.random() >= 0.75;\n      }\n    }\n\n    return grid;\n  }\n\n  findAliveNeighbours(i, j, grid, row) {\n    let aliveNeighboursTotal = 0;\n    // current row\n\n    // row[j-1] because checking neighbour to left, row[j+1] neighbour to right\n    if (row[j - 1]) {\n      aliveNeighboursTotal++;\n    }\n    if (row[j + 1]) {\n      aliveNeighboursTotal++;\n    }\n    // row above\n    if (grid[i - 1] !== undefined) {\n      if (grid[i - 1][j - 1]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i - 1][j]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i - 1][j + 1]) {\n        aliveNeighboursTotal++;\n      }\n    }\n    // row below\n    if (grid[i + 1] !== undefined) {\n      if (grid[i + 1][j - 1]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i + 1][j]) {\n        aliveNeighboursTotal++;\n      }\n      if (grid[i + 1][j + 1]) {\n        aliveNeighboursTotal++;\n      }\n\n      return aliveNeighboursTotal;\n    }\n  }\n\n  createNextGrid(grid) {\n    let updatedGrid = [];\n    let aliveNeighboursCount;\n    grid.map((row, i) => {\n      updatedGrid[i] = [];\n\n      return row.map((cell, j) => {\n        aliveNeighboursCount = this.findAliveNeighbours(i, j, grid, row);\n\n        if (grid[i][j] === true) {\n          if (aliveNeighboursCount >= 2 && aliveNeighboursCount <= 3) {\n            updatedGrid[i][j] = true;\n          } else {\n            updatedGrid[i][j] = false;\n          }\n        } else {\n          updatedGrid[i][j] = aliveNeighboursCount === 3 ? true : false;\n        }\n      });\n    });\n\n    let totalAlive = this.getTotalAlive(updatedGrid);\n\n    return {\n      updatedGrid,\n      aliveNeighboursCount,\n      totalAlive\n    };\n  }\n\n  getTotalAlive(grid) {\n    \n    let filteredArray = grid.map(row=>{\n      return row.filter(cell=>cell)\n    }).flat().length\n\n    return filteredArray\n\n    // return grid.map(row => {\n    //   return row.filter(cell => {\n    //     if (cell) {\n    //       return cell;\n    //     }\n    //   });\n    // }).length;\n  }\n}\n\nlet api = new Api();\n\nexport default api;\n","import React from \"react\";\nimport \"./App.css\";\n\nconst Grid = ({ grid, onClick }) => {\n  return grid.map((row, i) => {\n    return (\n      <div className=\"flex-container\" key={i}>\n        {row.map((cell, j) =>\n          cell ? (\n            <div className=\"grid-cell_alive\" onClick={() => onClick(cell,i,j)} key={j}>\n              {cell}\n            </div>\n          ) : (\n            <div className=\"grid-cell\" onClick={() => onClick(cell,i,j)} key={j}>\n              {cell}\n            </div>\n          )\n        )}\n      </div>\n    );\n  });\n};\n\nexport default Grid;\n","import React from 'react';\n\nconst SizeOfGrid = ({handleSubmit, handleChange, size}) => {\nreturn (\n  <form onSubmit={handleSubmit}>\n    <label>\n      Size of Grid:\n      <input\n        type=\"number\"\n        value={size}\n        onChange={handleChange}\n      />\n    </label>\n    <input type=\"submit\" value=\"Submit\" />\n  </form>)\n};\n\nexport default SizeOfGrid;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport api from \"./api.js\";\nimport Grid from \"./Grid.js\";\nimport SizeOfGrid from \"./SizeOfGrid\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [[]],\n      running: false,\n      numberAlive: null,\n      size: 50\n    };\n    this.handleUpdateGrid = this.handleUpdateGrid.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n    this.toggleCell = this.toggleCell.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(\n      { grid: api.createSeedGrid(this.state.size) },\n      this.runIteration()\n    );\n  }\n\n  runIteration() {\n    window.setInterval(() => {\n      this.handleUpdateGrid();\n    }, 1000);\n  }\n\n  handleRefresh() {\n    this.setState({ grid: api.createSeedGrid() });\n  }\n\n  handleUpdateGrid() {\n    // let [updatedGrid, aliveNeighboursCount] = api.createNextGrid(this.state.grid);\n    let updatedGrid = api.createNextGrid(this.state.grid);\n    console.log(\"updatedGrid\", updatedGrid);\n    this.setState({\n      grid: updatedGrid.updatedGrid,\n      numberAlive: updatedGrid.totalAlive\n    });\n  }\n\n  toggleCell(cell, i, j) {\n    console.log(\"cell\", cell, \"i\", i, \"j\", j);\n    cell = !cell;\n    let gridCopy = [...this.state.grid];\n    gridCopy[i][j] = cell;\n    this.setState({ grid: gridCopy });\n    if (cell) {\n      this.setState({ numberAlive: this.state.numberAlive + 1 });\n    } else {\n      this.setState({ numberAlive: this.state.numberAlive - 1 });\n    }\n  }\n\n  handleChange(event) {\n    this.setState({size: parseInt(event.target.value)});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    // value to pass to updateGrid\n    this.setState(\n      { grid: api.createSeedGrid(this.state.size) }\n      // this.runIteration()\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section>\n          <SizeOfGrid handleChange={this.handleChange} handleSubmit={this.handleSubmit} size={this.state.size}/>\n          <Grid grid={this.state.grid} onClick={this.toggleCell} />\n          <button onClick={this.handleUpdateGrid}>update grid</button>\n          {/* <button onClick={this.handleRefresh}>refresh grid</button> */}\n          <div>Number alive: {this.state.numberAlive}</div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}